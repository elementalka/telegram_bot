from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from states.arrest_check_state import ArrestCheckState
from checkers.arrest_queue import enqueue_check, progress_tracker
from datetime import datetime
from pathlib import Path
import pandas as pd
import os
import chardet
from checkers.arrest_batch_runner import normalize_inn

router = Router()
@router.callback_query(F.data == "check_arrest")
async def start_arrest_check(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ArrestCheckState.waiting_for_inn_file)
    await callback.message.answer(
        "–ê–†–ï–°–¢–´ üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ .csv –∏–ª–∏ .txt –∏–ª–∏ .xlsx —Ñ–∞–π–ª —Å –ò–ù–ù  –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ."
    )
@router.message(ArrestCheckState.waiting_for_inn_file, F.document)
async def process_inn_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    document = message.document

    if not document.file_name.endswith((".txt", ".csv", ".xlsx", ".xls")):
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt, .csv –∏ Excel (.xlsx, .xls) —Ñ–∞–π–ª—ã.")
        return

    path = f"data/user_data/{user_id}"
    os.makedirs(path, exist_ok=True)
    input_path = Path(path) / f"arrest_{document.file_id}{Path(document.file_name).suffix}"
    await message.bot.download(document, destination=input_path)

    with open(input_path, "rb") as f:
        raw = f.read(2048)
        encoding = chardet.detect(raw)["encoding"] or "utf-8"

    try:
        

        if input_path.suffix in [".xlsx", ".xls"]:
            try:
                df = pd.read_excel(input_path, usecols=[0], header=None, dtype=object, engine="openpyxl")
            except Exception as e:
                # –ü–æ–ø—ã—Ç–∫–∞ fallback –Ω–∞ csv
                df = pd.read_csv(input_path, usecols=[0], header=None, encoding="utf-8", engine="python")
        else:
            df = pd.read_csv(input_path, usecols=[0], header=None, encoding="utf-8", engine="python")


    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return


    df.columns = ["–ò–ù–ù"]
    before_count = len(df)

    df["–ò–ù–ù"] = df["–ò–ù–ù"].map(normalize_inn)
    df = df[df["–ò–ù–ù"].notnull() & (df["–ò–ù–ù"].str.len() == 12)]

    after_count = len(df)

    skipped_count = before_count - after_count

    if df.empty:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ò–ù–ù.")
        return

    result_path = Path(path) / f"result_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    bot = message.bot


    async def send_ready_file(user_id: int, output_path_arrest: str, output_path_clean: str, error: str = None, skipped_count: int = 0):
        if error:
            await bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n<code>{error}</code>")
            return
        if not os.path.exists(output_path_arrest):
            await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –∞—Ä–µ—Å—Ç–∞–º–∏.")
            return
        if not os.path.exists(output_path_clean):
            await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –±–µ–∑ –∞—Ä–µ—Å—Ç–æ–≤.")
            return
        if skipped_count > 0:
            await bot.send_message(user_id, f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ò–ù–ù (–Ω–∞–ø—Ä. –≤ —Ñ–æ—Ä–º–∞—Ç–µ '8.01E+11' –∏–ª–∏ –Ω–µ 12 —Ü–∏—Ñ—Ä).")

        await bot.send_document(
            user_id,
            document=FSInputFile(output_path_arrest),
            caption="üö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä–µ—Å—Ç—ã:"
        )
        await bot.send_document(
            user_id,
            document=FSInputFile(output_path_clean),
            caption="‚úÖ –ß–∏—Å—Ç—ã–µ –ò–ù–ù (–±–µ–∑ –∞—Ä–µ—Å—Ç–æ–≤):"
        )

        from keyboards.inline_main import main_inline_kb
        await bot.send_message(user_id, "üìç –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_inline_kb)
    df.to_csv(input_path, index=False, header=False, encoding="utf-8-sig")
    success, status = await enqueue_check(user_id, str(input_path), str(result_path), send_ready_file)

    if not success and status == "processing":
        await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞. –ü–æ–¥–æ–∂–¥–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        from keyboards.inline_main import main_inline_kb
        await bot.send_message(user_id, "üìå –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_inline_kb)
        return

    note = "\n‚è≥ –§–∞–π–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å." if status == "queued" else ""
    await message.answer(f"‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.{note}")

    progress_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")]
    ])
    await message.answer("üìä –ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=progress_kb)

@router.callback_query(F.data == "progress")
async def show_progress_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    prog = progress_tracker.get(user_id)
    if not prog or prog["total"] == 0:
        await callback.message.answer("‚è≥ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª.")
    else:
        await callback.message.answer(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {prog['done']} –∏–∑ {prog['total']}.")
