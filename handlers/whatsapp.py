from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from aiohttp import ClientSession
from states.ws_check_state import WSCheckState
from keyboards.inline_main import main_menu_kb
import os

WS_CHECKER_URL = os.getenv("WS_CHECKER_URL", "http://localhost:3000")

router = Router()

choice_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é")],
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (.txt/.csv)")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

@router.callback_query(F.data == "check_ws")
async def start_ws(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WSCheckState.choosing)
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–≤:",
        reply_markup=choice_kb,
    )

@router.message(WSCheckState.choosing, F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
async def choose_manual(message: types.Message, state: FSMContext):
    await state.set_state(WSCheckState.manual)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n"
        "–§–æ—Ä–º–∞—Ç: +71234567890 –∏–ª–∏ 71234567890",
        reply_markup=ReplyKeyboardRemove(),
    )

@router.message(WSCheckState.choosing, F.text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"))
async def choose_file(message: types.Message, state: FSMContext):
    await state.set_state(WSCheckState.file)
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .txt –∏–ª–∏ .csv —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–º–µ—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ).",
        reply_markup=ReplyKeyboardRemove(),
    )

@router.message(WSCheckState.manual, F.text)
async def process_manual(message: types.Message, state: FSMContext):
    lines = [l.strip() for l in message.text.splitlines() if l.strip()]
    numbers = [l if l.startswith("+") else "+" + l for l in lines]
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—è—é {len(numbers)} –Ω–æ–º–µ—Ä–æ–≤‚Ä¶")

    async with ClientSession() as sess:
        async with sess.post(f"{WS_CHECKER_URL}/check", json={"numbers": numbers}) as resp:
            if resp.status != 200:
                await message.answer(
                    f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {resp.status} {await resp.text()}"
                )
                await state.clear()
                return
            results = await resp.json()

    out = []
    for n in numbers:
        mark = "‚úÖ" if results.get(n) else "‚ùå"
        out.append(f"{n}: {mark}")

    await message.answer("\n".join(out), reply_markup=main_menu_kb)
    await state.clear()

@router.message(WSCheckState.file, F.document)
async def process_file(message: types.Message, state: FSMContext):
    doc = message.document
    fname = doc.file_name.lower()
    if not (fname.endswith(".txt") or fname.endswith(".csv")):
        await message.answer("–ù—É–∂–µ–Ω —Ñ–∞–π–ª .txt –∏–ª–∏ .csv")
        return

    bio = await (await doc.get_file()).download_as_bytearray()
    text = bio.decode("utf-8", errors="ignore").splitlines()
    numbers = [l.strip() for l in text if l.strip()]
    numbers = [l if l.startswith("+") else "+" + l for l in numbers]
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—è—é {len(numbers)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞‚Ä¶")

    async with ClientSession() as sess:
        async with sess.post(f"{WS_CHECKER_URL}/check", json={"numbers": numbers}) as resp:
            if resp.status != 200:
                await message.answer(
                    f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {resp.status} {await resp.text()}"
                )
                await state.clear()
                return
            results = await resp.json()

    ok = [n for n, v in results.items() if v]
    out_txt = "\n".join(ok) or "‚Äî –ü—É—Å—Ç–æ ‚Äî"

    await message.answer_document(
        document=out_txt.encode("utf-8"),
        filename="whatsapp_valid.txt",
    )
    await message.answer("üìç –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu_kb)
    await state.clear()

@router.message(WSCheckState.manual)
@router.message(WSCheckState.file)
async def wrong_input(message: types.Message):
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")

@router.message(F.text == "/cancel")
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
